'use strict';

const crypto = require('crypto');

const config = {
    hashBytes: 32,
    saltBytes: 16,
    iterations: 777689,
    digest: 'sha256'
};

/**
 * Hash a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Returns a self-contained buffer which can be arbitrarily encoded for storage
 * that contains all the data needed to verify a password.
 *
 * @param {!String} password
 */
exports.hashPassword = (password) =>
    new Promise((resolve, reject) => {
        // generate a salt for pbkdf2
        crypto.randomBytes(config.saltBytes, (err, salt) => {
            if (err) {
                reject(err);
            }
            crypto.pbkdf2(password, salt, config.iterations, config.hashBytes, config.digest,
                (err, hash) => {
                    err ? reject(err) :
                        resolve(config.iterations + `$`
                            + salt.toString('hex') + `$`
                            + hash.toString('hex'));
                }
            );
        });
    });

/**
 * Verify a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Accepts a hash and salt generated by hashPassword, and returns whether the
 * hash matched the password (as a boolean).
 *
 * @param {!String} password
 * @param {!String} combined Buffer containing hash and salt as generated by
 *   hashPassword.
 *
 */

exports.verifyPassword = (password, combined) =>
    new Promise((resolve, reject) => {
        // extract the salt and hash from the combined buffer
        let iterations, hexSalt, hexHash;
        [iterations, hexSalt, hexHash] = combined.split(`$`);
        iterations = Number.parseInt(iterations);
        const salt = Buffer.from(hexSalt, 'hex');
        const hash = Buffer.from(hexHash, 'hex');
        const saltBytes = salt.byteLength;
        const hashBytes = hash.byteLength;

        // verify the salt and hash against the password
        crypto.pbkdf2(password, salt, iterations, hashBytes, config.digest,
            (err, verify) => {
                err ? reject(err) : resolve(verify.toString('hex') === hexHash);
            });
    });




